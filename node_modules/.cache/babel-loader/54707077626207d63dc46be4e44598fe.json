{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\babnishvyas\\\\Documents\\\\Work_Space\\\\fhl\\\\testyoutube\\\\Youtube-react-app\\\\src\\\\components\\\\VideoDetail.js\";\nimport React from \"react\";\nimport Youtube from 'react-youtube';\nimport MContext from './ContextProvider';\nimport { useEffect, useState } from \"react/cjs/react.production.min\";\n\nvar VideoDetail = function VideoDetail(_ref) {\n  var video = _ref.video;\n\n  //function VideoDetail({video}) {\n  if (!video) {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 10\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 11\n      },\n      __self: this\n    }, \"Enter search keyword to load...\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 12\n      },\n      __self: this\n    }), React.createElement(\"p\", {\n      style: {\n        fontSize: '25px'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 13\n      },\n      __self: this\n    }, \"Use the API to search for videos matching specific search terms, topics, locations, publication dates, and much more. The APIs search.list method also supports searches for playlists and channels. With the YouTube Data API, you can add a variety of YouTube features to your application. Use the API to upload videos, manage playlists and subscriptions, update channel settings, and more.\"));\n  } //const [ytplayer,setYtplayer] = useState(null);\n\n\n  var ytplayer = null;\n  var videoSrc = \"https://www.youtube.com/embed/\".concat(video.id.videoId);\n  var opts = {\n    height: 390,\n    width: 640,\n    playerVars: {\n      autoplay: 1\n    }\n  };\n\n  function _onReady(event) {\n    var time = event.target.getCurrentTime();\n    console.log(\"The time is ::::: \" + time);\n    event.target.pauseVideo();\n    ytplayer = event.target;\n  }\n\n  var onPlayVideo = function onPlayVideo() {\n    ytplayer.playVideo();\n  };\n\n  function _getCurrentTime(event) {\n    var time = ytplayer.getCurrentTime();\n    var minutes = Math.floor(time / 60);\n    var seconds = time % 60;\n    console.log(\"Time::\" + minutes + \":\" + seconds);\n  }\n\n  function _seek(event) {\n    var time = document.getElementById(\"Note1\").innerText;\n    var minutes = parseInt(time.split(':')[0]);\n    var seconds = parseInt(time.split(':')[1]);\n\n    var _seconds = minutes * 60 + seconds;\n\n    console.log(_seconds);\n    ytplayer.seekTo(_seconds, true);\n  }\n\n  function _addNotes(event) {\n    var time = ytplayer.getCurrentTime();\n    var minutes = Math.floor(time / 60);\n    var seconds = time % 60;\n    var notesArea = document.getElementById(\"notes-area\").style.display = 'block';\n  }\n\n  function _saveNotes(event) {\n    var notes = document.getElementById(\"notes-area\").value;\n    var time = ytplayer.getCurrentTime();\n    var minutes = Math.floor(time / 60);\n    var seconds = time % 60;\n    var id = video.id.videoId;\n    console.log(id); //add to db here.......\n  }\n\n  function handleOnChange(event) {\n    var savebutton = document.getElementById(\"savebutton\").style.display = 'block';\n  }\n\n  var player = null;\n  console.log(typeof video);\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"ui embed\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79\n    },\n    __self: this\n  }, React.createElement(Youtube, {\n    className: \"youtube\",\n    videoId: video.id.videoId,\n    opts: opts,\n    onReady: _onReady,\n    onPause: _getCurrentTime,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    style: {\n      marginTop: '1em'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82\n    },\n    __self: this\n  }, React.createElement(\"button\", {\n    onClick: _getCurrentTime,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83\n    },\n    __self: this\n  }, \"[AddNotes]\"), React.createElement(\"button\", {\n    id: \"savebutton\",\n    onClick: _saveNotes,\n    style: {\n      display: 'none'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84\n    },\n    __self: this\n  }, \"SaveNotes\"), React.createElement(\"button\", {\n    onClick: _seek,\n    id: \"Note1\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85\n    },\n    __self: this\n  }, \"1:23\")), React.createElement(\"div\", {\n    className: \"ui segment\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87\n    },\n    __self: this\n  }, React.createElement(\"h4\", {\n    className: \"ui header\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88\n    },\n    __self: this\n  }, video.snippet.title), React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89\n    },\n    __self: this\n  }, video.snippet.description)), React.createElement(\"div\", {\n    className: \"search-bar ui segment\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91\n    },\n    __self: this\n  }, React.createElement(\"input\", {\n    id: \"notes-area\",\n    onChange: handleOnChange,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92\n    },\n    __self: this\n  })));\n};\n\nexport default VideoDetail;\n/*\r\nclass VideoDetail extends React.Component{\r\n\r\n    if (this.props === null) {\r\n        render() {\r\n\r\n\r\n            return <div>\r\n                <h1>Enter search keyword to load...</h1>\r\n                <br></br>\r\n                <p style={{fontSize: '25px'}}>\r\n                    Use the API to search for videos matching specific search terms, topics, locations, publication dates,\r\n                    and much more. The APIs search.list method also supports searches for playlists and channels.\r\n\r\n                    With the YouTube Data API, you can add a variety of YouTube features to your application. Use the API to\r\n                    upload videos, manage playlists and subscriptions, update channel settings, and more.\r\n\r\n                </p>\r\n            </div>;\r\n        }\r\n    }\r\n    state = {\r\n        video: null,\r\n        ytplayer:null\r\n    }\r\n}\r\n*/","map":{"version":3,"sources":["C:\\Users\\babnishvyas\\Documents\\Work_Space\\fhl\\testyoutube\\Youtube-react-app\\src\\components\\VideoDetail.js"],"names":["React","Youtube","MContext","useEffect","useState","VideoDetail","video","fontSize","ytplayer","videoSrc","id","videoId","opts","height","width","playerVars","autoplay","_onReady","event","time","target","getCurrentTime","console","log","pauseVideo","onPlayVideo","playVideo","_getCurrentTime","minutes","Math","floor","seconds","_seek","document","getElementById","innerText","parseInt","split","_seconds","seekTo","_addNotes","notesArea","style","display","_saveNotes","notes","value","handleOnChange","savebutton","player","marginTop","snippet","title","description"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport Youtube from 'react-youtube';\r\nimport MContext from './ContextProvider'\r\nimport {useEffect, useState} from \"react/cjs/react.production.min\";\r\n\r\nconst VideoDetail = ({ video }) => {\r\n\r\n//function VideoDetail({video}) {\r\n  if (!video) {\r\n    return <div>\r\n       <h1>Enter search keyword to load...</h1>\r\n       <br></br>\r\n       <p style={{fontSize:'25px'}}>\r\n       Use the API to search for videos matching specific search terms, topics, locations, publication dates, and much more. The APIs search.list method also supports searches for playlists and channels.\r\n\r\n       With the YouTube Data API, you can add a variety of YouTube features to your application. Use the API to upload videos, manage playlists and subscriptions, update channel settings, and more.        \r\n\r\n       </p>\r\n    </div>;\r\n  }\r\n    //const [ytplayer,setYtplayer] = useState(null);\r\n    let ytplayer = null;\r\n    const videoSrc = `https://www.youtube.com/embed/${video.id.videoId}`;\r\n    const opts = {\r\n        height: 390,\r\n        width: 640,\r\n        playerVars: {\r\n            autoplay: 1\r\n        },\r\n    };\r\n\r\n    function _onReady(event){\r\n\r\n        let time = event.target.getCurrentTime();\r\n        console.log(\"The time is ::::: \" + time);\r\n        event.target.pauseVideo();\r\n        ytplayer = event.target;\r\n    }\r\n    const onPlayVideo = () => {\r\n        ytplayer.playVideo();\r\n    }\r\n    function _getCurrentTime(event){\r\n\r\n        let time = ytplayer.getCurrentTime();\r\n        let minutes = Math.floor(time/60);\r\n        let seconds = time%60;\r\n        console.log(\"Time::\" + minutes + \":\" + seconds);\r\n    }\r\n    function _seek(event){\r\n        let time = document.getElementById(\"Note1\").innerText;\r\n        let minutes = parseInt(time.split(':')[0]);\r\n        let seconds = parseInt(time.split(':')[1]);\r\n        let _seconds = minutes*60 + seconds;\r\n        console.log(_seconds);\r\n        ytplayer.seekTo(_seconds, true);\r\n    }\r\n    function _addNotes(event){\r\n        let time = ytplayer.getCurrentTime();\r\n        let minutes = Math.floor(time/60);\r\n        let seconds = time%60;\r\n        let notesArea = document.getElementById(\"notes-area\").style.display='block'\r\n    }\r\n    function _saveNotes(event){\r\n        let notes = document.getElementById(\"notes-area\").value;\r\n        let time = ytplayer.getCurrentTime();\r\n        let minutes = Math.floor(time/60);\r\n        let seconds = time%60;\r\n        let id = video.id.videoId;\r\n        console.log(id);\r\n        //add to db here.......\r\n    }\r\n    function handleOnChange(event){\r\n        let savebutton = document.getElementById(\"savebutton\").style.display='block';\r\n    }\r\n    let player = null;\r\n  console.log(typeof video);\r\n  return (\r\n    <div>\r\n      <div className=\"ui embed\">\r\n          <Youtube className = \"youtube\" videoId={video.id.videoId} opts={opts} onReady={_onReady} onPause={_getCurrentTime} />\r\n      </div>\r\n        <div style={{marginTop: '1em'}}>\r\n            <button onClick={_getCurrentTime}>[AddNotes]</button>\r\n            <button id=\"savebutton\" onClick={_saveNotes} style={{display:'none'}}>SaveNotes</button>\r\n            <button onClick={_seek} id=\"Note1\">1:23</button>\r\n        </div>\r\n      <div className=\"ui segment\">\r\n        <h4 className=\"ui header\">{video.snippet.title}</h4>\r\n        <p>{video.snippet.description}</p>\r\n      </div>\r\n        <div className='search-bar ui segment'>\r\n            <input id=\"notes-area\" onChange={handleOnChange}/>\r\n        </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default VideoDetail;\r\n\r\n\r\n/*\r\nclass VideoDetail extends React.Component{\r\n\r\n    if (this.props === null) {\r\n        render() {\r\n\r\n\r\n            return <div>\r\n                <h1>Enter search keyword to load...</h1>\r\n                <br></br>\r\n                <p style={{fontSize: '25px'}}>\r\n                    Use the API to search for videos matching specific search terms, topics, locations, publication dates,\r\n                    and much more. The APIs search.list method also supports searches for playlists and channels.\r\n\r\n                    With the YouTube Data API, you can add a variety of YouTube features to your application. Use the API to\r\n                    upload videos, manage playlists and subscriptions, update channel settings, and more.\r\n\r\n                </p>\r\n            </div>;\r\n        }\r\n    }\r\n    state = {\r\n        video: null,\r\n        ytplayer:null\r\n    }\r\n}\r\n*/\r\n"]},"metadata":{},"sourceType":"module"}